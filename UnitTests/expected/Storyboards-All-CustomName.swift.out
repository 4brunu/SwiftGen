// Generated using SwiftGen, by O.Halligon â€” https://github.com/AliSoftware/SwiftGen

import Foundation
import UIKit

protocol StoryboardScene : RawRepresentable {
  static var storyboardName : String { get }
  static func storyboard() -> UIStoryboard
  static func initialViewController() -> UIViewController
  func viewController() -> UIViewController
  static func viewController(identifier: Self) -> UIViewController
}

extension StoryboardScene where Self.RawValue == String {
  static func storyboard() -> UIStoryboard {
    return UIStoryboard(name: self.storyboardName, bundle: nil)
  }

  static func initialViewController() -> UIViewController {
    return storyboard().instantiateInitialViewController()!
  }

  func viewController() -> UIViewController {
    return Self.storyboard().instantiateViewControllerWithIdentifier(self.rawValue)
  }
  static func viewController(identifier: Self) -> UIViewController {
    return identifier.viewController()
  }
}

extension UIStoryboard {
  struct XCTStoryboardsScene {
    enum Message : String, StoryboardScene {
      static let storyboardName = "Message"

      case Composer = "Composer"
      static func composerViewController() -> UIViewController {
        return Message.Composer.viewController()
      }

      case MessagesList = "MessagesList"
      static func messagesListViewController() -> UITableViewController {
        return Message.MessagesList.viewController() as! UITableViewController
      }

      case NavCtrl = "NavCtrl"
      static func navCtrlViewController() -> UINavigationController {
        return Message.NavCtrl.viewController() as! UINavigationController
      }

      case URLChooser = "URLChooser"
      static func urlChooserViewController() -> XXPickerViewController {
        return Message.URLChooser.viewController() as! XXPickerViewController
      }
    }
    enum Wizard : String, StoryboardScene {
      static let storyboardName = "Wizard"

      case AcceptCGU = "Accept-CGU"
      static func acceptCGUViewController() -> UIViewController {
        return Wizard.AcceptCGU.viewController()
      }

      case CreateAccount = "CreateAccount"
      static func createAccountViewController() -> CreateAccViewController {
        return Wizard.CreateAccount.viewController() as! CreateAccViewController
      }

      case Preferences = "Preferences"
      static func preferencesViewController() -> UITableViewController {
        return Wizard.Preferences.viewController() as! UITableViewController
      }

      case ValidatePassword = "Validate_Password"
      static func validatePasswordViewController() -> UIViewController {
        return Wizard.ValidatePassword.viewController()
      }
    }
  }

  struct XCTStoryboardsSegue {
    enum Message : String {
      case CustomBack = "CustomBack"
      case NonCustom = "NonCustom"
      case ShowNavCtrl = "Show-NavCtrl"
    }
  }
}
