// Generated using SwiftGen â€” https://github.com/SwiftGen/SwiftGen

{% if tables.count > 0 %}
#import "{{ param.headerName|default:"Localizable" }}.h"

@interface BundleToken : NSObject
@end

@implementation BundleToken
@end

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wformat-security"

static NSString* tr(NSString *tableName, NSString *key, ...) {
    va_list args;
    va_start(args, key);

    NSBundle *bundle = [NSBundle bundleForClass:BundleToken.class];
    NSString *format = [bundle localizedStringForKey:key value:@"" table:tableName];
    NSString *result = [[NSString alloc] initWithFormat:format arguments:args];
    return result;
};
#pragma clang diagnostic pop

{% macro parametersBlock types %}{% filter removeNewlines:"leading" %}
  {% for type in types %}
    ({% call paramTranslate type %})p{{ forloop.counter }}{% if not forloop.last %} and:{% endif %}
  {% endfor %}
{% endfilter %}{% endmacro %}
{% macro argumentsBlock types %}{% filter removeNewlines:"leading" %}
  {% for type in types %}
    p{{forloop.counter}}{% if not forloop.last %}, {% endif %}
  {% endfor %}
{% endfilter %}{% endmacro %}
{% macro paramTranslate swiftType %}
  {% if swiftType == "Float" %}
    float
  {% elif swiftType == "Int" %}
    NSInteger
  {% elif swiftType == "CChar" %}
    char
  {% elif swiftType == "String" %}
    NSString*
  {% elif swiftType == "UnsafePointer<CChar>" %}
    char*
  {% elif swiftType == "UnsafeRawPointer" %}
    void*
  {% else %}
    objc-m.stencil is missing '{{swiftType}}'
  {% endif %}
{% endmacro %}
{% macro recursiveTableContents table item sp %}
{{sp}}  {% for string in item.strings %}
{{sp}}  {% if string.types %}
+ (NSString*){{string.key|swiftIdentifier:"pretty"|lowerFirstWord}}:{% call parametersBlock string.types %}
{
    return tr(@"{{table}}", @"{{string.key}}", {% call argumentsBlock string.types %});
}
{% else %}
+ (NSString*){{string.key|swiftIdentifier:"pretty"|lowerFirstWord}} {
    return tr(@"{{table}}", @"{{string.key}}");
}
{{sp}}  {% endif %}
{{sp}}  {% endfor %}
{{sp}}  {% for child in item.children %}
{{sp}}  {% call recursiveTableContents table child sp %}
{{sp}}  {% endfor %}
{% endmacro %}
{% for table in tables %}
        {% set tableName %}{{table.name|default:"Localized"}}{% endset %}
@implementation {{ tableName }} : NSObject
        {% call recursiveTableContents table.name table.levels "  " %}
@end

{% endfor %}
{% else %}
// No strings found
{% endif %}
