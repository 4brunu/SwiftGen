// swiftlint:disable all
// Generated using SwiftGen â€” https://github.com/SwiftGen/SwiftGen

{% if files.count > 0 or directories.count > 0 %}
{% set enumName %}{{param.enumName|default:"Files"}}{% endset %}
{% set useExt %}{{param.useExtension|default:"true"}}{% endset %}
{% set accessModifier %}{% if param.publicAccess %}public{% else %}internal{% endif %}{% endset %}
{% set resourceType %}{{param.resourceTypeName|default:"File"}}{% endset %}
import Foundation

// swiftlint:disable superfluous_disable_command file_length implicit_return

// MARK: - Files

{% macro fileBlock file %}
  /// {% if file.path %}{{file.path}}/{% endif %}{{file.name}}{% if file.ext %}.{{file.ext}}{% endif %}
  {{accessModifier}} static let {{file.name|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}}{% if useExt and file.ext %}{{file.ext|swiftIdentifier:"pretty"|capitalize|escapeReservedKeywords}}{% endif %} = {{resourceType}}(name: "{{file.name}}", ext: {% if file.ext %}"{{file.ext}}"{% else %}nil{% endif %}, path: "{{file.path}}", mimeType: "{{file.mimeType}}")
{% endmacro %}
{% macro dirBlock directory %}
  {% for file in directory.files %}
  {% call fileBlock file %}
  {% endfor %}
  {% for dir in directory.directories %}
  {% call dirBlock dir %}
  {% endfor %}
{% endmacro %}
// swiftlint:disable identifier_name line_length number_separator type_body_length
{{accessModifier}} enum {{enumName}} {
  {% for file in files %}
  {% call fileBlock file %}
  {% endfor %}
  {% for dir in directories %}
  {% call dirBlock dir %}
  {% endfor %}
}

// MARK: - Implementation Details

{{accessModifier}} struct {{resourceType}} {
  {{accessModifier}} fileprivate(set) var name: String
  {{accessModifier}} fileprivate(set) var ext: String?
  {{accessModifier}} fileprivate(set) var path: String
  {{accessModifier}} fileprivate(set) var mimeType: String

  {{accessModifier}} var url: URL {
    return url(locale: nil)
  }

  {{accessModifier}} func url(locale: Locale?) -> URL {
    let bundle = {{param.bundle|default:"BundleToken.bundle"}}
    let url = bundle.url(forResource: name, withExtension: ext, subdirectory: path, localization: locale?.identifier)
    guard let result = url else {
      let file = name + (ext ? "." + ext : "")
      fatalError("Could not locate file named \(file)")
    }
    return result
  }

  {{accessModifier}} var path: String {
    return path(locale: nil)
  }

  {{accessModifier}} func path(locale: Locale?) -> String {
    return url(locale: locale).path
  }
}
{% if not param.bundle %}

// swiftlint:disable convenience_type
private final class BundleToken {
  static let bundle: Bundle = Bundle(for: BundleToken.self)
}
// swiftlint:enable convenience_type
{% endif %}
{% else %}
// No files found
{% endif %}
